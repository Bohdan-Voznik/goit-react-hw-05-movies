{"version":3,"file":"static/js/842.f69d9911.chunk.js","mappings":"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","sources":["components/FilmsList/FilmsList.styled.jsx","components/FilmsList/FilmItem/FilmItem.styled.jsx","components/FilmsList/FilmItem/FilmItem.jsx","components/FilmsList/FilmsList.jsx","components/Home/Home.jsx","js/fechAPI.js"],"sourcesContent":["import styled from '@emotion/styled';\n\nexport const List = styled.ul`\n  margin: -10px;\n  padding: 0;\n  list-style: none;\n  display: flex;\n  flex-wrap: wrap;\n`;\n\nexport const Section = styled.section`\n  margin-top: 50px;\n  margin-bottom: 50px;\n`;\nexport const Wraper = styled.div``;\n","import styled from '@emotion/styled';\nimport { Link } from 'react-router-dom';\n\nexport const Item = styled.li`\n  flex-basis: calc((100% - 60px) / 3);\n  margin: 10px;\n  border-radius: 5px;\n\n  &:hover,\n  &:focus {\n    box-shadow: 0px 5px 10px 2px rgba(34, 60, 80, 0.2);\n    cursor: pointer;\n    transform: scale(1.02);\n  }\n`;\nexport const FilmLin = styled(Link)`\n  text-decoration: none;\n`;\n\nexport const Img = styled.img`\n  //   border-radius: 5px;\n  object-fit: cover;\n`;\n\nexport const Info = styled.div`\n  padding-top: 7px;\n  padding-left: 3px;\n  padding-bottom: 3px;\n\n  font-family: Roboto;\n  font-weight: 500;\n  font-size: 12px;\n  line-height: 14px;\n`;\n\nexport const Name = styled.h2`\n  text-transform: uppercase;\n  color: #000000;\n  margin: 0;\n`;\n\nexport const Genres = styled.p`\n  color: #ff6b08;\n`;\n","import { useLocation } from 'react-router-dom';\nimport PropTypes from 'prop-types';\n\nimport { Item, FilmLin, Img, Info, Name, Genres } from './FilmItem.styled';\n\nexport const FilmItem = ({ id, title, img, reliseData, genres }) => {\n  const location = useLocation();\n  return (\n    <Item>\n      <FilmLin to={`/movies/${id}`} state={location}>\n        <Img src={img} alt={title} width=\"280px\" height=\"402px\"></Img>\n        <Info>\n          <Name>{title}</Name>\n          <Genres>{`${genres} | ${reliseData}`}</Genres>\n        </Info>\n      </FilmLin>\n    </Item>\n  );\n};\n\nFilmItem.propTypes = {\n  id: PropTypes.number.isRequired,\n  title: PropTypes.string.isRequired,\n  img: PropTypes.string.isRequired,\n  reliseData: PropTypes.string.isRequired,\n  genres: PropTypes.string.isRequired,\n};\n","import { List, Section, Wraper } from './FilmsList.styled';\nimport PropTypes from 'prop-types';\n\nimport { FilmItem } from './FilmItem/FilmItem';\nimport { Container } from 'components/Container/Container';\n\nexport const FilmsList = ({ films }) => {\n  return (\n    <Section>\n      <Container>\n        <Wraper>\n          <List>\n            {films.map(({ id, title, img, reliseData, genres }) => {\n              return (\n                <FilmItem\n                  key={id}\n                  id={id}\n                  title={title}\n                  img={img}\n                  reliseData={reliseData}\n                  genres={genres}\n                />\n              );\n            })}\n          </List>\n        </Wraper>\n      </Container>\n    </Section>\n  );\n};\n\nFilmsList.propTypes = {\n  films: PropTypes.arrayOf(\n    PropTypes.exact({\n      id: PropTypes.number.isRequired,\n      title: PropTypes.string.isRequired,\n      img: PropTypes.string.isRequired,\n      reliseData: PropTypes.string.isRequired,\n      genres: PropTypes.string.isRequired,\n    })\n  ),\n};\n","import { useState, useEffect } from 'react';\nimport {} from 'react-router-dom';\n\nimport { Header } from 'components/Header/Header';\nimport { FilmsList } from 'components/FilmsList/FilmsList';\nimport { Footer } from 'components/Footer/Footer';\n\nimport { fetchTrending } from 'js/fechAPI';\n\nexport default function Home() {\n  const [films, setFilms] = useState([]);\n\n  useEffect(() => {\n    fetchTrending().then(setFilms);\n  }, []);\n\n  return (\n    <>\n      <Header />\n      <FilmsList films={films} />\n      <Footer />\n    </>\n  );\n}\n","const axios = require('axios');\n\nconst API_KEY = '410621b9cfc5cc5268eeae574da75634';\nconst BASE_URL = 'https://api.themoviedb.org/3/';\n\nexport async function fetchTrending() {\n  const options = {\n    method: 'get',\n    baseURL: BASE_URL,\n    url: 'trending/movie/week',\n    params: {\n      api_key: API_KEY,\n    },\n  };\n\n  const resonse = await axios(options);\n  options.url = '/genre/movie/list';\n  const response = await axios(options);\n  const genresList = response.data.genres;\n\n  const films = resonse.data.results.map(\n    ({ poster_path, genre_ids, id, original_title, release_date }) => {\n      const genres = genre_ids\n        .map(idFilmmGenre => genresList.find(({ id }) => id === idFilmmGenre))\n        .map(element => element.name)\n        .join(', ');\n      return {\n        id,\n        title: original_title,\n        img:\n          poster_path !== null\n            ? `https://image.tmdb.org/t/p/w500${poster_path}`\n            : 'https://bflix.biz/no-poster.png',\n        reliseData: release_date === undefined ? '' : release_date.slice(0, 4),\n        genres,\n      };\n    }\n  );\n  return films;\n}\n\nexport async function fetchMovieById(id) {\n  const options = {\n    method: 'get',\n    baseURL: BASE_URL,\n    url: `/movie/${id}`,\n    params: {\n      api_key: API_KEY,\n    },\n  };\n\n  const resonse = await axios(options);\n  const {\n    vote_average,\n    genres: oldGenres,\n    overview,\n    original_title: title,\n    poster_path,\n  } = resonse.data;\n  const useScore = vote_average * 10;\n  const genres = oldGenres.map(({ name }) => name).join(', ');\n\n  return {\n    useScore,\n    genres,\n    overview,\n    title,\n    img:\n      poster_path !== null\n        ? `https://image.tmdb.org/t/p/w500${poster_path}`\n        : 'https://bflix.biz/no-poster.png',\n  };\n}\n\nexport async function fetchMoviesByTag(tag) {\n  const options = {\n    method: 'get',\n    baseURL: BASE_URL,\n    url: '/search/movie',\n    params: {\n      api_key: API_KEY,\n      query: tag,\n    },\n  };\n\n  const resonse = await axios(options);\n  options.url = '/genre/movie/list';\n  const response = await axios(options);\n  const genresList = response.data.genres;\n\n  const films = resonse.data.results.map(\n    ({ poster_path, genre_ids, id, original_title, release_date }) => {\n      const genres = genre_ids\n        .map(idFilmmGenre => genresList.find(({ id }) => id === idFilmmGenre))\n        .map(element => element.name)\n        .join(', ');\n      return {\n        id,\n        title: original_title,\n        img:\n          poster_path !== null\n            ? `https://image.tmdb.org/t/p/w500${poster_path}`\n            : 'https://bflix.biz/no-poster.png',\n        reliseData: release_date === undefined ? '' : release_date.slice(0, 4),\n        genres,\n      };\n    }\n  );\n  return films;\n}\n\nexport async function fetchCast(id) {\n  const options = {\n    method: 'get',\n    baseURL: BASE_URL,\n    url: `/movie/${id}/credits`,\n    params: {\n      api_key: API_KEY,\n    },\n  };\n\n  const resonse = await axios(options);\n  const cast = resonse.data.cast.map(\n    ({ cast_id: id, name, character, profile_path }) => {\n      const img =\n        profile_path !== null\n          ? `https://image.tmdb.org/t/p/w500${profile_path}`\n          : 'https://bflix.biz/no-poster.png';\n\n      return { id, name, character, img };\n    }\n  );\n  return cast;\n}\n\nexport async function fetchReviews(id) {\n  const options = {\n    method: 'get',\n    baseURL: BASE_URL,\n    url: `/movie/${id}/reviews`,\n    params: {\n      api_key: API_KEY,\n    },\n  };\n\n  const resonse = await axios(options);\n  const reviews = resonse.data.results.map(({ id, author, content }) => {\n    return { id, author, content };\n  });\n  return reviews;\n}\n"],"names":["List","styled","Section","Wraper","Item","FilmLin","Link","Img","Info","Name","Genres","FilmItem","id","title","img","reliseData","genres","location","useLocation","to","state","src","alt","width","height","FilmsList","films","Container","map","Home","useState","setFilms","useEffect","fetchTrending","then","axios","require","API_KEY","BASE_URL","options","method","baseURL","url","params","api_key","resonse","response","genresList","data","results","poster_path","genre_ids","original_title","release_date","idFilmmGenre","find","element","name","join","undefined","slice","fetchMovieById","vote_average","oldGenres","overview","useScore","fetchMoviesByTag","tag","query","fetchCast","cast","cast_id","character","profile_path","fetchReviews","reviews","author","content"],"sourceRoot":""}